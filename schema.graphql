
type DepositOrWithdraw @entity {
  id: ID!
  vault: Bytes!
  user: Bytes!
  hash: Bytes!
  amount: BigInt! 
  type: String! 
  balance: BigInt! 
  pps: BigInt! 
  ts: BigInt!
  blockNumber: BigInt!
}

type Transaction @entity {
  id: ID!
  vault: Bytes!
  from: Bytes!
  to: Bytes!
  hash: Bytes!
  amount: BigInt!
  fromBalance: BigInt!
  toBalance: BigInt!
  type: String!
  pps: BigInt!
  ts: BigInt!
  blockNumber: BigInt!
}

type StrategyReport @entity {
  id: ID!
  vault: Bytes!
  strategy: Bytes!
  from: Bytes!
  hash: Bytes!
  gain: BigInt!
  loss: BigInt!
  debtPaid: BigInt!
  totalGain: BigInt!
  totalLoss: BigInt!
  debtAdded: BigInt!
  debtRatio: BigInt!
  tokenPrice: BigInt!
  mgmtFee: BigInt!
  performanceFee: BigInt!
  strategistFee: BigInt!
  mgmtFeePaid: BigInt!
  performanceFeePaid: BigInt!
  strategistFeePaid: BigInt!
  pps: BigInt!
  ts: BigInt!
  blockNumber: BigInt!
}

type User @entity {
  id: ID! # address:vault
  addr: Bytes!
  vault: Bytes!
  sumDeposits: BigInt!
  sumWithdrawals: BigInt!
  balance: BigInt!
  profits: BigInt! # balanceOf(user) + sumWithdrawals - sumDeposits
  transactions: [UserTransaction!]! @derivedFrom(field: "user")
}

type VaultStatistic @entity {
  id: ID! # address:vault
  vault: Bytes!
  totalUsers: BigInt!,
  totalUsersProfits: BigInt!
}

type UserTransaction @entity {
  id: ID! # address:vault
  hash: Bytes!
  user: User
  from: Bytes!
  to: Bytes!
  value: BigInt!
  tokenValue: BigInt!
  type: String!
  pps: BigInt!
}
